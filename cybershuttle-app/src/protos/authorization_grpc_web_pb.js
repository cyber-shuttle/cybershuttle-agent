/**
 * @fileoverview gRPC-Web generated client stub for org.cybershuttle.appserver
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.2
// source: authorization.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.org = {};
proto.org.cybershuttle = {};
proto.org.cybershuttle.appserver = require('./authorization_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.org.cybershuttle.appserver.UserServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.org.cybershuttle.appserver.UserServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.org.cybershuttle.appserver.CreateUserRequest,
 *   !proto.org.cybershuttle.appserver.CreateUserResponse>}
 */
const methodDescriptor_UserService_CreateUser = new grpc.web.MethodDescriptor(
  '/org.cybershuttle.appserver.UserService/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.org.cybershuttle.appserver.CreateUserRequest,
  proto.org.cybershuttle.appserver.CreateUserResponse,
  /**
   * @param {!proto.org.cybershuttle.appserver.CreateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.org.cybershuttle.appserver.CreateUserResponse.deserializeBinary
);


/**
 * @param {!proto.org.cybershuttle.appserver.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.org.cybershuttle.appserver.CreateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.org.cybershuttle.appserver.CreateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.org.cybershuttle.appserver.UserServiceClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/org.cybershuttle.appserver.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser,
      callback);
};


/**
 * @param {!proto.org.cybershuttle.appserver.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.org.cybershuttle.appserver.CreateUserResponse>}
 *     Promise that resolves to the response
 */
proto.org.cybershuttle.appserver.UserServicePromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/org.cybershuttle.appserver.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.org.cybershuttle.appserver.GetUserRequest,
 *   !proto.org.cybershuttle.appserver.GetUserResponse>}
 */
const methodDescriptor_UserService_GetUser = new grpc.web.MethodDescriptor(
  '/org.cybershuttle.appserver.UserService/GetUser',
  grpc.web.MethodType.UNARY,
  proto.org.cybershuttle.appserver.GetUserRequest,
  proto.org.cybershuttle.appserver.GetUserResponse,
  /**
   * @param {!proto.org.cybershuttle.appserver.GetUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.org.cybershuttle.appserver.GetUserResponse.deserializeBinary
);


/**
 * @param {!proto.org.cybershuttle.appserver.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.org.cybershuttle.appserver.GetUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.org.cybershuttle.appserver.GetUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.org.cybershuttle.appserver.UserServiceClient.prototype.getUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/org.cybershuttle.appserver.UserService/GetUser',
      request,
      metadata || {},
      methodDescriptor_UserService_GetUser,
      callback);
};


/**
 * @param {!proto.org.cybershuttle.appserver.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.org.cybershuttle.appserver.GetUserResponse>}
 *     Promise that resolves to the response
 */
proto.org.cybershuttle.appserver.UserServicePromiseClient.prototype.getUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/org.cybershuttle.appserver.UserService/GetUser',
      request,
      metadata || {},
      methodDescriptor_UserService_GetUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.org.cybershuttle.appserver.CreateTokenRequest,
 *   !proto.org.cybershuttle.appserver.CreateTokenResponse>}
 */
const methodDescriptor_UserService_CreateToken = new grpc.web.MethodDescriptor(
  '/org.cybershuttle.appserver.UserService/CreateToken',
  grpc.web.MethodType.UNARY,
  proto.org.cybershuttle.appserver.CreateTokenRequest,
  proto.org.cybershuttle.appserver.CreateTokenResponse,
  /**
   * @param {!proto.org.cybershuttle.appserver.CreateTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.org.cybershuttle.appserver.CreateTokenResponse.deserializeBinary
);


/**
 * @param {!proto.org.cybershuttle.appserver.CreateTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.org.cybershuttle.appserver.CreateTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.org.cybershuttle.appserver.CreateTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.org.cybershuttle.appserver.UserServiceClient.prototype.createToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/org.cybershuttle.appserver.UserService/CreateToken',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateToken,
      callback);
};


/**
 * @param {!proto.org.cybershuttle.appserver.CreateTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.org.cybershuttle.appserver.CreateTokenResponse>}
 *     Promise that resolves to the response
 */
proto.org.cybershuttle.appserver.UserServicePromiseClient.prototype.createToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/org.cybershuttle.appserver.UserService/CreateToken',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.org.cybershuttle.appserver.IsAuthenticatedRequest,
 *   !proto.org.cybershuttle.appserver.IsAuthenticatedResponse>}
 */
const methodDescriptor_UserService_IsAuthenticated = new grpc.web.MethodDescriptor(
  '/org.cybershuttle.appserver.UserService/IsAuthenticated',
  grpc.web.MethodType.UNARY,
  proto.org.cybershuttle.appserver.IsAuthenticatedRequest,
  proto.org.cybershuttle.appserver.IsAuthenticatedResponse,
  /**
   * @param {!proto.org.cybershuttle.appserver.IsAuthenticatedRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.org.cybershuttle.appserver.IsAuthenticatedResponse.deserializeBinary
);


/**
 * @param {!proto.org.cybershuttle.appserver.IsAuthenticatedRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.org.cybershuttle.appserver.IsAuthenticatedResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.org.cybershuttle.appserver.IsAuthenticatedResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.org.cybershuttle.appserver.UserServiceClient.prototype.isAuthenticated =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/org.cybershuttle.appserver.UserService/IsAuthenticated',
      request,
      metadata || {},
      methodDescriptor_UserService_IsAuthenticated,
      callback);
};


/**
 * @param {!proto.org.cybershuttle.appserver.IsAuthenticatedRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.org.cybershuttle.appserver.IsAuthenticatedResponse>}
 *     Promise that resolves to the response
 */
proto.org.cybershuttle.appserver.UserServicePromiseClient.prototype.isAuthenticated =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/org.cybershuttle.appserver.UserService/IsAuthenticated',
      request,
      metadata || {},
      methodDescriptor_UserService_IsAuthenticated);
};


module.exports = proto.org.cybershuttle.appserver;

