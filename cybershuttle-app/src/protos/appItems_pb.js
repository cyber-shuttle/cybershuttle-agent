// source: appItems.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.org.cybershuttle.appserver.App', null, global);
goog.exportSymbol('proto.org.cybershuttle.appserver.AppRequest', null, global);
goog.exportSymbol('proto.org.cybershuttle.appserver.AppsRequest', null, global);
goog.exportSymbol('proto.org.cybershuttle.appserver.ConsulParams', null, global);
goog.exportSymbol('proto.org.cybershuttle.appserver.Item', null, global);
goog.exportSymbol('proto.org.cybershuttle.appserver.ItemRequest', null, global);
goog.exportSymbol('proto.org.cybershuttle.appserver.ItemStatus', null, global);
goog.exportSymbol('proto.org.cybershuttle.appserver.ListItems', null, global);
goog.exportSymbol('proto.org.cybershuttle.appserver.MyApps', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.cybershuttle.appserver.App = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.cybershuttle.appserver.App, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.cybershuttle.appserver.App.displayName = 'proto.org.cybershuttle.appserver.App';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.cybershuttle.appserver.ConsulParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.cybershuttle.appserver.ConsulParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.cybershuttle.appserver.ConsulParams.displayName = 'proto.org.cybershuttle.appserver.ConsulParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.cybershuttle.appserver.AppRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.cybershuttle.appserver.AppRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.cybershuttle.appserver.AppRequest.displayName = 'proto.org.cybershuttle.appserver.AppRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.cybershuttle.appserver.MyApps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.cybershuttle.appserver.MyApps.repeatedFields_, null);
};
goog.inherits(proto.org.cybershuttle.appserver.MyApps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.cybershuttle.appserver.MyApps.displayName = 'proto.org.cybershuttle.appserver.MyApps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.cybershuttle.appserver.AppsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.cybershuttle.appserver.AppsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.cybershuttle.appserver.AppsRequest.displayName = 'proto.org.cybershuttle.appserver.AppsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.cybershuttle.appserver.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.cybershuttle.appserver.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.cybershuttle.appserver.Item.displayName = 'proto.org.cybershuttle.appserver.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.cybershuttle.appserver.ItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.cybershuttle.appserver.ItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.cybershuttle.appserver.ItemRequest.displayName = 'proto.org.cybershuttle.appserver.ItemRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.cybershuttle.appserver.ListItems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.cybershuttle.appserver.ListItems.repeatedFields_, null);
};
goog.inherits(proto.org.cybershuttle.appserver.ListItems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.cybershuttle.appserver.ListItems.displayName = 'proto.org.cybershuttle.appserver.ListItems';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.cybershuttle.appserver.ItemStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.cybershuttle.appserver.ItemStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.cybershuttle.appserver.ItemStatus.displayName = 'proto.org.cybershuttle.appserver.ItemStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.cybershuttle.appserver.App.prototype.toObject = function(opt_includeInstance) {
  return proto.org.cybershuttle.appserver.App.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.cybershuttle.appserver.App} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.App.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    icon: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    noofitems: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.cybershuttle.appserver.App}
 */
proto.org.cybershuttle.appserver.App.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.cybershuttle.appserver.App;
  return proto.org.cybershuttle.appserver.App.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.cybershuttle.appserver.App} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.cybershuttle.appserver.App}
 */
proto.org.cybershuttle.appserver.App.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIcon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNoofitems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.cybershuttle.appserver.App.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.cybershuttle.appserver.App.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.cybershuttle.appserver.App} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.App.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIcon();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNoofitems();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.org.cybershuttle.appserver.App.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.cybershuttle.appserver.App} returns this
 */
proto.org.cybershuttle.appserver.App.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string icon = 2;
 * @return {string}
 */
proto.org.cybershuttle.appserver.App.prototype.getIcon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.cybershuttle.appserver.App} returns this
 */
proto.org.cybershuttle.appserver.App.prototype.setIcon = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 appId = 3;
 * @return {number}
 */
proto.org.cybershuttle.appserver.App.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.cybershuttle.appserver.App} returns this
 */
proto.org.cybershuttle.appserver.App.prototype.setAppid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 noOfItems = 4;
 * @return {number}
 */
proto.org.cybershuttle.appserver.App.prototype.getNoofitems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.cybershuttle.appserver.App} returns this
 */
proto.org.cybershuttle.appserver.App.prototype.setNoofitems = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.toObject = function(opt_includeInstance) {
  return proto.org.cybershuttle.appserver.ConsulParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.cybershuttle.appserver.ConsulParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.ConsulParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    consultoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    consulpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    consulhost: jspb.Message.getFieldWithDefault(msg, 3, ""),
    consulport: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.cybershuttle.appserver.ConsulParams}
 */
proto.org.cybershuttle.appserver.ConsulParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.cybershuttle.appserver.ConsulParams;
  return proto.org.cybershuttle.appserver.ConsulParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.cybershuttle.appserver.ConsulParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.cybershuttle.appserver.ConsulParams}
 */
proto.org.cybershuttle.appserver.ConsulParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsultoken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsulpath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsulhost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConsulport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.cybershuttle.appserver.ConsulParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.cybershuttle.appserver.ConsulParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.ConsulParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsultoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConsulpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConsulhost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConsulport();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string consulToken = 1;
 * @return {string}
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.getConsultoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.cybershuttle.appserver.ConsulParams} returns this
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.setConsultoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string consulPath = 2;
 * @return {string}
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.getConsulpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.cybershuttle.appserver.ConsulParams} returns this
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.setConsulpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string consulHost = 3;
 * @return {string}
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.getConsulhost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.cybershuttle.appserver.ConsulParams} returns this
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.setConsulhost = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 consulPort = 4;
 * @return {number}
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.getConsulport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.cybershuttle.appserver.ConsulParams} returns this
 */
proto.org.cybershuttle.appserver.ConsulParams.prototype.setConsulport = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.cybershuttle.appserver.AppRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.cybershuttle.appserver.AppRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.cybershuttle.appserver.AppRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.AppRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.cybershuttle.appserver.AppRequest}
 */
proto.org.cybershuttle.appserver.AppRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.cybershuttle.appserver.AppRequest;
  return proto.org.cybershuttle.appserver.AppRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.cybershuttle.appserver.AppRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.cybershuttle.appserver.AppRequest}
 */
proto.org.cybershuttle.appserver.AppRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.cybershuttle.appserver.AppRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.cybershuttle.appserver.AppRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.cybershuttle.appserver.AppRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.AppRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 appId = 1;
 * @return {number}
 */
proto.org.cybershuttle.appserver.AppRequest.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.cybershuttle.appserver.AppRequest} returns this
 */
proto.org.cybershuttle.appserver.AppRequest.prototype.setAppid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.cybershuttle.appserver.MyApps.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.cybershuttle.appserver.MyApps.prototype.toObject = function(opt_includeInstance) {
  return proto.org.cybershuttle.appserver.MyApps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.cybershuttle.appserver.MyApps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.MyApps.toObject = function(includeInstance, msg) {
  var f, obj = {
    appsList: jspb.Message.toObjectList(msg.getAppsList(),
    proto.org.cybershuttle.appserver.App.toObject, includeInstance),
    noofapps: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.cybershuttle.appserver.MyApps}
 */
proto.org.cybershuttle.appserver.MyApps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.cybershuttle.appserver.MyApps;
  return proto.org.cybershuttle.appserver.MyApps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.cybershuttle.appserver.MyApps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.cybershuttle.appserver.MyApps}
 */
proto.org.cybershuttle.appserver.MyApps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.cybershuttle.appserver.App;
      reader.readMessage(value,proto.org.cybershuttle.appserver.App.deserializeBinaryFromReader);
      msg.addApps(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNoofapps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.cybershuttle.appserver.MyApps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.cybershuttle.appserver.MyApps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.cybershuttle.appserver.MyApps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.MyApps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.cybershuttle.appserver.App.serializeBinaryToWriter
    );
  }
  f = message.getNoofapps();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated App apps = 1;
 * @return {!Array<!proto.org.cybershuttle.appserver.App>}
 */
proto.org.cybershuttle.appserver.MyApps.prototype.getAppsList = function() {
  return /** @type{!Array<!proto.org.cybershuttle.appserver.App>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.cybershuttle.appserver.App, 1));
};


/**
 * @param {!Array<!proto.org.cybershuttle.appserver.App>} value
 * @return {!proto.org.cybershuttle.appserver.MyApps} returns this
*/
proto.org.cybershuttle.appserver.MyApps.prototype.setAppsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.cybershuttle.appserver.App=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.cybershuttle.appserver.App}
 */
proto.org.cybershuttle.appserver.MyApps.prototype.addApps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.cybershuttle.appserver.App, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.cybershuttle.appserver.MyApps} returns this
 */
proto.org.cybershuttle.appserver.MyApps.prototype.clearAppsList = function() {
  return this.setAppsList([]);
};


/**
 * optional int32 noOfApps = 2;
 * @return {number}
 */
proto.org.cybershuttle.appserver.MyApps.prototype.getNoofapps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.cybershuttle.appserver.MyApps} returns this
 */
proto.org.cybershuttle.appserver.MyApps.prototype.setNoofapps = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.cybershuttle.appserver.AppsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.cybershuttle.appserver.AppsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.cybershuttle.appserver.AppsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.AppsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.cybershuttle.appserver.AppsRequest}
 */
proto.org.cybershuttle.appserver.AppsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.cybershuttle.appserver.AppsRequest;
  return proto.org.cybershuttle.appserver.AppsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.cybershuttle.appserver.AppsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.cybershuttle.appserver.AppsRequest}
 */
proto.org.cybershuttle.appserver.AppsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.cybershuttle.appserver.AppsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.cybershuttle.appserver.AppsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.cybershuttle.appserver.AppsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.AppsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 userId = 1;
 * @return {number}
 */
proto.org.cybershuttle.appserver.AppsRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.cybershuttle.appserver.AppsRequest} returns this
 */
proto.org.cybershuttle.appserver.AppsRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.cybershuttle.appserver.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.org.cybershuttle.appserver.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.cybershuttle.appserver.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    itemstatus: (f = msg.getItemstatus()) && proto.org.cybershuttle.appserver.ItemStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.cybershuttle.appserver.Item}
 */
proto.org.cybershuttle.appserver.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.cybershuttle.appserver.Item;
  return proto.org.cybershuttle.appserver.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.cybershuttle.appserver.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.cybershuttle.appserver.Item}
 */
proto.org.cybershuttle.appserver.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemid(value);
      break;
    case 4:
      var value = new proto.org.cybershuttle.appserver.ItemStatus;
      reader.readMessage(value,proto.org.cybershuttle.appserver.ItemStatus.deserializeBinaryFromReader);
      msg.setItemstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.cybershuttle.appserver.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.cybershuttle.appserver.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.cybershuttle.appserver.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getItemstatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.org.cybershuttle.appserver.ItemStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.org.cybershuttle.appserver.Item.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.cybershuttle.appserver.Item} returns this
 */
proto.org.cybershuttle.appserver.Item.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.org.cybershuttle.appserver.Item.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.cybershuttle.appserver.Item} returns this
 */
proto.org.cybershuttle.appserver.Item.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 itemId = 3;
 * @return {number}
 */
proto.org.cybershuttle.appserver.Item.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.cybershuttle.appserver.Item} returns this
 */
proto.org.cybershuttle.appserver.Item.prototype.setItemid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ItemStatus itemStatus = 4;
 * @return {?proto.org.cybershuttle.appserver.ItemStatus}
 */
proto.org.cybershuttle.appserver.Item.prototype.getItemstatus = function() {
  return /** @type{?proto.org.cybershuttle.appserver.ItemStatus} */ (
    jspb.Message.getWrapperField(this, proto.org.cybershuttle.appserver.ItemStatus, 4));
};


/**
 * @param {?proto.org.cybershuttle.appserver.ItemStatus|undefined} value
 * @return {!proto.org.cybershuttle.appserver.Item} returns this
*/
proto.org.cybershuttle.appserver.Item.prototype.setItemstatus = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.cybershuttle.appserver.Item} returns this
 */
proto.org.cybershuttle.appserver.Item.prototype.clearItemstatus = function() {
  return this.setItemstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.cybershuttle.appserver.Item.prototype.hasItemstatus = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.cybershuttle.appserver.ItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.cybershuttle.appserver.ItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.cybershuttle.appserver.ItemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.ItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    consulparams: (f = msg.getConsulparams()) && proto.org.cybershuttle.appserver.ConsulParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.cybershuttle.appserver.ItemRequest}
 */
proto.org.cybershuttle.appserver.ItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.cybershuttle.appserver.ItemRequest;
  return proto.org.cybershuttle.appserver.ItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.cybershuttle.appserver.ItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.cybershuttle.appserver.ItemRequest}
 */
proto.org.cybershuttle.appserver.ItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemid(value);
      break;
    case 2:
      var value = new proto.org.cybershuttle.appserver.ConsulParams;
      reader.readMessage(value,proto.org.cybershuttle.appserver.ConsulParams.deserializeBinaryFromReader);
      msg.setConsulparams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.cybershuttle.appserver.ItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.cybershuttle.appserver.ItemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.cybershuttle.appserver.ItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.ItemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getConsulparams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.cybershuttle.appserver.ConsulParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 itemId = 1;
 * @return {number}
 */
proto.org.cybershuttle.appserver.ItemRequest.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.cybershuttle.appserver.ItemRequest} returns this
 */
proto.org.cybershuttle.appserver.ItemRequest.prototype.setItemid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ConsulParams consulParams = 2;
 * @return {?proto.org.cybershuttle.appserver.ConsulParams}
 */
proto.org.cybershuttle.appserver.ItemRequest.prototype.getConsulparams = function() {
  return /** @type{?proto.org.cybershuttle.appserver.ConsulParams} */ (
    jspb.Message.getWrapperField(this, proto.org.cybershuttle.appserver.ConsulParams, 2));
};


/**
 * @param {?proto.org.cybershuttle.appserver.ConsulParams|undefined} value
 * @return {!proto.org.cybershuttle.appserver.ItemRequest} returns this
*/
proto.org.cybershuttle.appserver.ItemRequest.prototype.setConsulparams = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.cybershuttle.appserver.ItemRequest} returns this
 */
proto.org.cybershuttle.appserver.ItemRequest.prototype.clearConsulparams = function() {
  return this.setConsulparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.cybershuttle.appserver.ItemRequest.prototype.hasConsulparams = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.cybershuttle.appserver.ListItems.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.cybershuttle.appserver.ListItems.prototype.toObject = function(opt_includeInstance) {
  return proto.org.cybershuttle.appserver.ListItems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.cybershuttle.appserver.ListItems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.ListItems.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.org.cybershuttle.appserver.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.cybershuttle.appserver.ListItems}
 */
proto.org.cybershuttle.appserver.ListItems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.cybershuttle.appserver.ListItems;
  return proto.org.cybershuttle.appserver.ListItems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.cybershuttle.appserver.ListItems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.cybershuttle.appserver.ListItems}
 */
proto.org.cybershuttle.appserver.ListItems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.cybershuttle.appserver.Item;
      reader.readMessage(value,proto.org.cybershuttle.appserver.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.cybershuttle.appserver.ListItems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.cybershuttle.appserver.ListItems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.cybershuttle.appserver.ListItems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.ListItems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.cybershuttle.appserver.Item.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Item items = 1;
 * @return {!Array<!proto.org.cybershuttle.appserver.Item>}
 */
proto.org.cybershuttle.appserver.ListItems.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.org.cybershuttle.appserver.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.cybershuttle.appserver.Item, 1));
};


/**
 * @param {!Array<!proto.org.cybershuttle.appserver.Item>} value
 * @return {!proto.org.cybershuttle.appserver.ListItems} returns this
*/
proto.org.cybershuttle.appserver.ListItems.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.cybershuttle.appserver.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.cybershuttle.appserver.Item}
 */
proto.org.cybershuttle.appserver.ListItems.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.cybershuttle.appserver.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.cybershuttle.appserver.ListItems} returns this
 */
proto.org.cybershuttle.appserver.ListItems.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.cybershuttle.appserver.ItemStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.org.cybershuttle.appserver.ItemStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.cybershuttle.appserver.ItemStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.ItemStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    isitemlaunched: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    itemstatus: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.cybershuttle.appserver.ItemStatus}
 */
proto.org.cybershuttle.appserver.ItemStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.cybershuttle.appserver.ItemStatus;
  return proto.org.cybershuttle.appserver.ItemStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.cybershuttle.appserver.ItemStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.cybershuttle.appserver.ItemStatus}
 */
proto.org.cybershuttle.appserver.ItemStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsitemlaunched(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.cybershuttle.appserver.ItemStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.cybershuttle.appserver.ItemStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.cybershuttle.appserver.ItemStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.cybershuttle.appserver.ItemStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsitemlaunched();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getItemstatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool isItemLaunched = 1;
 * @return {boolean}
 */
proto.org.cybershuttle.appserver.ItemStatus.prototype.getIsitemlaunched = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.cybershuttle.appserver.ItemStatus} returns this
 */
proto.org.cybershuttle.appserver.ItemStatus.prototype.setIsitemlaunched = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string itemStatus = 2;
 * @return {string}
 */
proto.org.cybershuttle.appserver.ItemStatus.prototype.getItemstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.cybershuttle.appserver.ItemStatus} returns this
 */
proto.org.cybershuttle.appserver.ItemStatus.prototype.setItemstatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.org.cybershuttle.appserver);
